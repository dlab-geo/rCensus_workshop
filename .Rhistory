library(dplyr)
library(tidycensus)
library(sf)
library(ggplot2)
my_census_api_key <- "f2d6f4f743545d3a42a67412b05935dc7712c432"
census_api_key(my_census_api_key)
?load_variables
vars2010 <- load_variables(year=2010,        # Year or end year for ACS
dataset = 'sf1',  # 'sf1' for decennial or 'acs5'
cache = True)
View(vars2010)
vars2010 <- load_variables(year=2010,        # Year or end year for ACS
dataset = 'sf1',  # 'sf1' for decennial or 'acs5'
cache = True)
View(vars2010)
vars2010 <- load_variables(year=2010,        # Year or end year for ACS
dataset = 'sf1',  # 'sf1' for decennial or 'acs5'
cache = True)
vars2010 <- load_variables(year=2010,        # Year or end year for ACS
dataset = 'sf1',  # 'sf1' for decennial or 'acs5'
cache = TRUE)
vars2010 <- load_variables(year=2010,        # Year or end year for ACS
dataset = 'sf1',  # 'sf1' for decennial or 'acs5'
cache = TRUE)
View(vars2010)
pop2010 <- get_decennial(geography = "state",   # census tabulation unit
variables = "P001001", # variable(s) of interest
year = 2010)
type(pop2010)
class(pop2010)
library(sf)
pop_plot<- ggplot(data=pop2010, aes(x=reorder(NAME,value), y=value/1000000)) +
geom_bar(stat="identity") + coord_flip() +
theme_minimal() +
labs(title = "2010 US Population by State") +
xlab("State") +
ylab("in millions")
pop_plot
# What is the variable name in 2000?
vars2000 <- load_variables(year=2000, dataset = 'sf1', cache = T)
# Take a look and search in the dataframe
View(vars2000)
# Fetch the 2000 pop data
pop2000 <- get_decennial(geography = "state", variables = "P001001", year = 2000)
# Take a look (plot if time)
pop2000
#Let's fetch data for just 3 states.
state_pop2010 <- get_decennial(geography = "state", # census tabulation unit
variables = "P001001",     # variables of interest
year = 2010,               # census year
state=c("CA","OR","WA"))   # Filter by states of interest
## View Results
state_pop2010
co_pop2010 <- get_decennial(geography = "county",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010)
#View the county data to see what was retrieved.
co_pop2010
# challenge - solution
co_pop2010_ca <- get_decennial(geography = "county",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
state=c('CA'))
#co_pop2010_ca
## Fetch population by **county** for Oregon & California
co_pop2010_caor <- get_decennial(geography = "county",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
state=c('CA','OR'))
co_pop2010_caor
tract_pop2010 <- get_decennial(geography = "tract",   # census tabulation unit
variables = "P001001",       # variable of interest
year = 2010,                 # census year
state="CA",                  # limit to state of California
county=c("Alameda","Contra Costa"))  # and only these counties
# View the results! How many census tracts are in these 3 counties?
tract_pop2010
# Tigris options - used by tidycensus
options(tigris_class = "sf")      # SP is the default format returned by tigris
options(tigris_use_cache = TRUE)  # Save retrieved data locally
Sys.getenv('TIGRIS_CACHE_DIR')
# Options - used by tidycensus
options(tigris_class = "sf")      # SP is the default format returned by tigris
options(tigris_use_cache = TRUE)  # Save retrieved data locally
# Check it
Sys.getenv('TIGRIS_CACHE_DIR')
# Set it
tigris_cache_dir("~/Documents/gis_census")  # Folder for local data
# Check it again
Sys.getenv('TIGRIS_CACHE_DIR')
# Set it
tigris_cache_dir("~/Documents/gis_census")  # Folder for local data
# Check it again
Sys.getenv('TIGRIS_CACHE_DIR')
nine_counties <- c("001", "075", "013", "041", "055", "081", "085", "095", "097")
#  population by **county** for Alameda County, California
alco_pop2010 <- get_decennial(geography = "county",   # census tabulation unit
variables = "P001001",  # variables of interest
year = 2010,
state=c('CA'),
county=c('Alameda County'))
alco_pop2010
options(tigris_class = "sf")      # SP is the default format returned by tigris
options(tigris_use_cache = TRUE)
pop2010geo <- get_decennial(geography = "state",
variables = c(pop10="P001001"),
year = 2010,
output="wide",
geometry=TRUE) # Fetch geometry with the data for
pop2010geo
plot(pop2010geo$geometry)
plot(pop2010geo_shifted$geometry)
pop2010geo_shifted <- get_decennial(geography = "state",
variables = c(pop10="P001001"),
output="wide",
year = 2010,
geometry=TRUE,
shift_geo=TRUE)
plot(pop2010geo_shifted$geometry)
plot(pop2010geo_shifted['pop10'])
ggplot(pop2010geo_shifted, aes(fill = pop10)) +
geom_sf()
library(dplyr)
library(tidycensus)
library(sf)
library(ggplot2)
my_census_api_key <- "f2d6f4f743545d3a42a67412b05935dc7712c432"
census_api_key(my_census_api_key)
# Options - used by tidycensus
options(tigris_class = "sf")      # SP is the default format returned by tigris
options(tigris_use_cache = TRUE)  # Save retrieved data locally
# Check it
Sys.getenv('TIGRIS_CACHE_DIR')
# Set it
tigris_cache_dir("~/Documents/gis_census")  # Folder for local data
# Check it again
Sys.getenv('TIGRIS_CACHE_DIR')
sf_poor <- get_acs(geography = "tract",
variables = c('C17002_002','C17002_003'), # poverty variables
year = 2016,
state="CA",
summary_var = "C17002_001", # Est of num people - denom
county="San Francisco",
geometry=T)
sfz <- get_acs(geography="zcta",
variables=c('B0001_001'),
state="CA",
geometry=T
)
sfz <- get_acs(geography="zcta",
variables=c('B0001_001'),
state="CA"
)
sfz <- get_acs(geography="zcta",
variables=c('B0001_001'),
geometry=T
)
sfz <- get_acs(geography="zcta",
variables=c('B00001_001'),
geometry=T
)
sfz.plot()
View(sfz)
plot(sfz['estimate'])
library(tmap)
tmap_mode("view") # set mode to interactive
zcta_pop_map <- tm_shape(sfz) +
tm_polygons(col="estimate")
zcta_pop_map
r
# A list of the packages we will use
list_of_packages <- c("tidyverse","tidycensus","tigris","sf","mapview")
# identify the ones we need to install
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
# install any that are not installed (new_packages)
if(length(new_packages) > 0) {
print(paste("Installing these packages:", new_packages))
install.packages(new_packages)
} else {
print("All packages already installed!")
}
library(tidycensus)
library(tidyverse)
library(tigris)
library(sf)
library(mapview)
# source (run) an r script that creates a variable with my key
source("/Users/pattyf/Documents/Dlab/workshops/keys/census_api_key.R")
#register the key
census_api_key(my_census_api_key)
# Set working directory
setwd("~/Documents/Dlab/workshops/2021/Census-Data-in-R")
install.packages(c('wru'))
library(wru)
?predict_race
data(voters)
force(voters)
voter_df <- data(voters)
voter_df <- force(voters)
View(voter_df)
?predict_race
predict_race(voter.file = voter_df, census.surname = TRUE, surname.only = FALSE,
surname.year = 2010, census.geo = "tract", census.key = my_census_api_key, census.data = NA,
age = FALSE, sex = FALSE, party = FALSE, retry = 0)
out_df <- predict_race(voter.file = voter_df, census.surname = F, surname.only = FALSE,
surname.year = 2010, census.geo = "tract", census.key = my_census_api_key, census.data = NA,
age = FALSE, sex = FALSE, party = FALSE, retry = 0)
View(voter_df)
out_df <- predict_race(voter.file = voter_df, census.surname = F, surname.only = FALSE,
surname.year = 2010, census.geo = "tract", census.key = my_census_api_key)
out_df <- predict_race(voter.file = voter_df, census.surname = F, surname.only = FALSE,
surname.year = 2010)
out_df <- predict_race(voter.file = voter_df, census.surname = F, surname.only = T)
# alternate way to get the key from the environment
census_api_key(key = Sys.getenv("CENSUS_API_KEY"),
install = TRUE,
overwrite = TRUE)
# A list of the packages we will use
list_of_packages <- c("tidyverse","tidycensus","tigris","sf","mapview")
# identify the ones we need to install
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
# install any that are not installed (new_packages)
if(length(new_packages) > 0) {
print(paste("Installing these packages:", new_packages))
install.packages(new_packages)
} else {
print("All packages already installed!")
}
library(tidycensus)
library(tidyverse)
library(tigris)
library(sf)
library(mapview)
# # source (run) an r script that creates a variable with my key
# source("/Users/pattyf/Documents/Dlab/workshops/keys/census_api_key.R")
#
# #register the key
# census_api_key(my_census_api_key)
# alternate way to get the key from the environment and register it in one shot
census_api_key(key = Sys.getenv("CENSUS_API_KEY"),
install = TRUE,
overwrite = TRUE)
readRenviron("~/.Renviron")
# # source (run) an r script that creates a variable with my key
# source("/Users/pattyf/Documents/Dlab/workshops/keys/census_api_key.R")
#
# #register the key
# census_api_key(my_census_api_key)
# alternate way to get the key from the environment and register it in one shot
census_api_key(key = Sys.getenv("CENSUS_API_KEY"),
install = TRUE,
overwrite = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# A list of the packages we will use
list_of_packages <- c("tidyverse","tidycensus","tigris","sf","mapview")
# identify the ones we need to install
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
# install any that are not installed (new_packages)
if(length(new_packages) > 0) {
print(paste("Installing these packages:", new_packages))
install.packages(new_packages)
} else {
print("All packages already installed!")
}
library(tidycensus)
library(tidyverse)
library(tigris)
library(sf)
library(mapview)
# # source (run) an r script that creates a variable with my key
# source("/Users/pattyf/Documents/Dlab/workshops/keys/census_api_key.R")
#
# #register the key
# census_api_key(my_census_api_key)
# alternate way to get the key from the environment and register it in one shot
census_api_key(key = Sys.getenv("CENSUS_API_KEY"),
install = TRUE,
overwrite = TRUE)
# read R environment
readRenviron("~/.Renviron")
vars2010 <- load_variables(year=2010,        # Year or end year for ACS-5yr
dataset = 'sf1',  # 'sf1' for decennial or 'acs5', etc
cache = TRUE)     # Whether to save fetched data locally
View(vars2010)
pop2010 <- get_decennial(geography = "state",   # census tabulation unit
variables = "P001001", # variable(s) of interest
year = 2010)           # census year
# read R environment
readRenviron("~/.Renviron")
readRenviron()
environment()
R.home(component = "home")
# set key (insert your key in "key_here" but DO NOT DO THIS STEP IN SHARED CODE)
Sys.setenv(CENSUS_KEY="f9884f4ef4098aeb1d053d4392d0d7ccea36fc74")
# get the key from the environment
census_api_key(key = Sys.getenv("CENSUS_KEY"),
install = TRUE,
overwrite = TRUE)
# read R environment
readRenviron("~/.Renviron")
Sys.setenv(my_census_api_key = "f9884f4ef4098aeb1d053d4392d0d7ccea36fc74")
Sys.setenv(CENSUS_KEY = "f9884f4ef4098aeb1d053d4392d0d7ccea36fc74")
# # source (run) an r script that creates a variable with my key
# source("/Users/pattyf/Documents/Dlab/workshops/keys/census_api_key.R")
source("/Users/kathe/berkeley_drive/analyses/keys/census_api_key.R")
# register the key
census_api_key(key = my_census_api_key,
install = TRUE,
overwrite = TRUE)
# # source (run) an r script that creates a variable with my key
# source("/Users/pattyf/Documents/Dlab/workshops/keys/census_api_key.R")
source("/Users/kathe/berkeley_drive/analyses/keys/census_api_key.R")
# register the key
census_api_key(key = my_census_api_key,
install = TRUE,
overwrite = TRUE)
